---
import heroImg from "~/assets/hero.jpeg";
import Button from "~/components/primitive/Button.astro";
import HeadingCaps from "~/components/styled/polym/Caps.astro";
import LINKS from "~/data/links";
import { Icon } from "astro-iconify";
import { Image } from "astro:assets";

const props = Astro.props;
---

<section class="max region" {...props}>
  <div class="container">
    <div class="cont-img">
      <Image
        src={heroImg}
        alt="Head profile of Chuang Caleb"
        width={heroImg.width / 3}
        densities={[1, 2, 3]}
        loading="eager"
      />
    </div>
    <div class="cont-text | flow-lg">
      <p class="suptitle">chuang caleb</p>
      <h1 class="flom-2xs">
        software dev <br />
        with a different <mark>story.</mark>
      </h1>
      <p>
        Ahoy! ðŸŒŠ This is Caleb speaking. I professionally tinker with <b>
          UI design systems
        </b> & <b>dynamic web apps</b> â€” and unprofessionally with <b>
          narrative storytelling</b
        >.
      </p>
      <p>You'll find out about me on this site. Wanna work together?</p>
      <div>
        <Button theme="brand">contact me</Button>
      </div>
    </div>
    <div class="cont-socials region">
      <ul class="socials-ul flow-md">
        {
          Object.values(LINKS).map((link) => (
            <li>
              <a href={link.href}>
                <Icon name={link.icon} />
              </a>
            </li>
          ))
        }
      </ul>
    </div>
  </div>
</section>

<style lang="scss">
  $width-max: 1400px;
  $gutter-max: 8rem;

  $gutter: minmax(0, $gutter-max);
  $col-center-w: min($width-max - $gutter-max * 2, 100%);
  section {
    max-width: $width-max;
    margin-inline: auto;
    display: grid;
    grid-template-columns: $gutter $col-center-w $gutter;
  }

  .container {
    display: grid;
    grid-column: 2 / 2;
    grid-template-columns: 7fr 5.5fr;
    grid-template-rows: repeat(auto, 1fr);
    column-gap: var(--space-m);
    position: relative;
  }

  .cont-text {
    display: grid;
    grid-column: 1 / -1;
    grid-row: 3 / 8;
    grid-template-columns: subgrid;
    grid-template-rows: auto;
    align-content: start;

    .suptitle {
      font-size: var(--step-3);
      font-weight: var(--font-weight-4);
      font-family: var(--font-heading);
      letter-spacing: var(--font-letterspacing-1);
      color: var(--text-faded);
      text-decoration: underline;
      text-decoration-color: var(--brand);
      // text-underline-offset: 0.25em;
      text-underline-offset: 0.5em;
    }

    * {
      grid-column: 1 / -2;
      @media (width < 600px) {
        grid-column: 1 / -1;
      }
    }
    h1 {
      grid-column: 1 / -1;
      // hyphens: none;
      line-height: var(--step-7);
    }
    p {
      text-wrap: balance;
      font-size: var(--step-1);
    }

    .cc-btn {
      font-size: var(--step-2);
    }
  }

  .cont-img {
    grid-column: -2 / -1;
    grid-row: 1 / 6;
    justify-self: end;
    filter: brightness(1.2) saturate(0.8);
    z-index: -1;
    position: relative;
    width: 100%;
    height: fit-content;

    img {
      position: inherit;
      width: 100%;
      z-index: -2;
    }
    &::after {
      background-color: hsla(var(--surface-1a-hsl) / 0.5);
      content: "";
      position: absolute;
      height: 100%;
      width: 100%;
      inset: 0;
    }
    @media (width < 700px) {
      &::after {
        box-shadow: inset 0 calc(var(--space-l) * -1) var(--space-xl) -10px var(--surface-1a);
      }
    }
  }

  .cont-socials {
    grid-column: -2 / -1;
    grid-row: 6 / 8;
    text-align: end;
    display: grid;
    align-items: end;

    @media (width < 600px) {
      grid-column: 1 / -1;
      grid-row: auto;
    }
    ul {
      // font-size: var(--step-1);
      text-transform: lowercase;
      span {
        color: hsla(var(--brand-hsl) / 0.5);
        &:is(:hover, :focus, :active) {
          color: var(--brand);
        }
      }
      svg {
        width: var(--step-5);
      }
      @media (width < 600px) {
        display: flex;
        justify-content: center;
        column-gap: var(--space-m);
        * {
          --flow-space: 0;
        }
      }
    }
  }

  mark {
    -webkit-animation: 1.5s highlight 0.2s 1 normal forwards;
    animation: 1.5s highlight 0.2s 1 normal forwards;
    background-color: none;
    background: linear-gradient(45deg, var(--brand) 50%, transparent 50%);
    background-size: 205% 100%;
    background-position: 100% 0;
    color: var(--text-on-brand);
  }
  @-webkit-keyframes highlight {
    to {
      background-position: 0 0;
    }
  }

  @keyframes highlight {
    to {
      background-position: 0 0;
    }
  }

  @media (width < 450px) {
    br {
      display: none;
    }
  }
</style>
