---
import NoteListItems from "~/components/block/note/NoteListItems.astro";
import type { formatNoteRelations } from "~/utils/note-relations";

interface Props {
  formattedRelations: NonNullable<
    Awaited<ReturnType<typeof formatNoteRelations>>
  >;
}

const { children, parents, type, prev, next } = Astro.props.formattedRelations;
// parents which are also series
// type SeriesesNotes = Series[]; type Series = SeriesMember[]
const serieses = parents.filter((note) => Boolean(note.data.series));
// const regularParents = parents.filter((note) => !note.data.series);

const childrenHeader =
  type === "regular"
    ? "Children note(s)"
    : type === "topic/series"
      ? "Children note(s) under this topic series"
      : "Children note(s) under this topic";
---

<div class="container | linew-wide prose flow-lg" data-pagefind-ignore="all">
  <h2 class="sr-only">Note Relations</h2>
  {/* Parents / Ups */}
  {
    !!parents.length && (
      <>
        <h3 class="text-faded">↑ Parent note(s)</h3>
        <ul class="flow-sm">
          <NoteListItems references={parents} />
        </ul>
      </>
    )
  }

  {/* Prevs */}
  {
    prev && (
      <>
        <h3 class="text-faded">← Previous note(s)</h3>
        <ul class="flow-sm">
          <NoteListItems references={[prev]} />
        </ul>
      </>
    )
  }
  {/* Nexts */}
  {
    next && (
      <>
        <h3 class="text-faded">→ Next note(s)</h3>
        <ul class="flow-sm">
          <NoteListItems references={[next]} />
        </ul>
      </>
    )
  }
  {/* Downs / Children */}
  {
    children && (
      <>
        <h3 class="text-faded">↓ {childrenHeader}</h3>
        <ul class:list={["flow-sm", type === "topic/series" && "one-col"]}>
          <NoteListItems
            references={children.items}
            isOrdered={type === "topic/series"}
          />
        </ul>
      </>
    )
  }
  {/* Parent's series */}
  {
    !!serieses.length &&
      serieses.map((series) => (
        <>
          <h3 class="text-faded">
            ↓{" "}
            {`${series.data.emojip ? series.data.emojip + " " : ""} ${series.name}`}
            (topic series)
          </h3>
          {series.data.series && (
            <ol class="flow-sm one-col">
              <NoteListItems references={series.data.series} isOrdered />
            </ol>
          )}
        </>
      ))
  }
</div>

<style>
  h3 {
    text-transform: uppercase;
    font-size: var(--step-0);
  }
  ol,
  ul {
    display: grid;
    @media (width > 800px) {
      &:not(.one-col) {
        grid-template-columns: repeat(2, 1fr);
      }
      &.one-col :global(li) {
        max-width: var(--size-content-2);
      }
    }
    column-gap: var(--space-s);
    row-gap: var(--space-m);
    /* grid-column: wide; */
    :global(li) {
      --flow-space: 0;
    }
  }
</style>
