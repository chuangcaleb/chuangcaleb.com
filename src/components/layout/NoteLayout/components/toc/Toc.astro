---
import type { MarkdownHeading } from "astro";
import generateToc from "lib/markdown/toc";
import TagWIcon from "~/components/styled/polym/TagWIcon.astro";
import TocHeading from "./TocHeading.astro";

interface Props {
  headings: MarkdownHeading[];
}

const { headings = [] } = Astro.props;

const toc = generateToc(headings);

// Boot out H1; but we've already stripped it in lib/remark/strip-h1.mjs
// keeping this here in case
// const tocHeadings = (function () {
//   if (headings[0].depth === 1) {
//     headings.shift();
//   }
//   return headings;
// })();
---

{
  !!toc.length && (
    <nav id="toc">
      <TagWIcon as="h4" iconColor="tx3" iconName="lucide:list">
        Outline
      </TagWIcon>
      <ul class="toc-root">
        {toc.map((h) => (
          <TocHeading tocItem={h} />
        ))}
      </ul>
    </nav>
  )
}

<script>
  function initToc() {
    const setCurrentHeading: IntersectionObserverCallback = (entries) => {
      // loop to each entries (headings) in the page
      for (let entry of entries) {
        // equivalent to the slug returned from pageHeadings
        const { id } = entry.target;
        // get the TOC link's element for the current entry
        const tocLinkEl = document.querySelector(`#toc a[href='#${id}']`);
        if (!tocLinkEl) return;

        // check if the entry is intersecting
        if (entry.isIntersecting) {
          // remove active class from all links
          document
            .querySelectorAll("#toc a")
            .forEach((e) => e.classList.remove("active"));
          // add active class to the currently active entry
          tocLinkEl.classList.add("active");
        }
      }
    };
    const observerOptions = {
      threshold: 1,
      rootMargin: "0px 0px -66%",
    };
    const observer = new IntersectionObserver(
      setCurrentHeading,
      observerOptions
    );
    // select all headings to observe
    const elToObserve = document.querySelectorAll("article :is(h2,h3,h4)");
    // finally, observe the elements
    elToObserve.forEach((el) => observer.observe(el));
  }
  initToc();
  document.addEventListener("astro:after-swap", initToc);
</script>

<style>
  nav {
    width: 100%;
    display: flex;
    flex-direction: column;
    row-gap: var(--space-xs);
  }
  nav h4 {
    /* display: block; */
    /* color: var(--text-faded); */
    font-size: var(--step-1);
  }
</style>
