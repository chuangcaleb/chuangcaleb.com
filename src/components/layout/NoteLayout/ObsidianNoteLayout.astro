---
import { render } from "astro:content";
import type { SuperNote } from "lib/utils/types";
import FurtherResources from "~/components/block/FurtherResources.astro";
import AccentA from "~/components/styled/monom/AccentA.astro";
import { getNoteEntries } from "~/utils/note";
import { formatNoteRelations } from "~/utils/note-relations";
import Metadata from "./components/metadata/AsideMetadata.astro";
import MetadataValueItem from "./components/metadata/MetadataValueItem.astro";
import MetadataContainer from "./components/MetadataContainer.astro";
import NoteHeader from "./components/NoteHeader.astro";
import NoteRelationsSection from "./components/NoteRelationsSection.astro";
import Toc from "./components/toc/Toc.astro";
import NoteLayout from "./NoteLayout.astro";
import Alert from "~/components/block/Alert.astro";
import Duration from "~/components/block/Duration.astro";
import { isWithinDuration } from "~/utils/time";
import Pill from "~/components/block/note/Pill.astro";
import { metaMinDays } from "~/utils/note-meta";

interface Props {
  entry: SuperNote;
}

const { entry } = Astro.props;

const { Content, headings } = await render(entry);
const metadata = entry.data;

// title
const title = `${metadata.emojip ? metadata.emojip + " " : ""} ${entry.name}`;

// parents
const parents = [...(metadata.up ?? [])];
const parentNotes = await getNoteEntries(parents);
// description
const { description } = metadata;

const formattedRelations = await formatNoteRelations(metadata);

const pagefindWeight = !!metadata.emojip ? 10 : 8;
---

<NoteLayout
  title={entry.name}
  description={description}
  noBottomPadding={!!formattedRelations}
>
  <slot slot="header">
    <NoteHeader
      title={title}
      description={description}
      pagefindWeight={pagefindWeight}
    >
      <hr />
      <div class="content text-faded flow-sm">
        {
          (!!parentNotes.length || !!metadata.emojip) && (
            <>
              {!!parentNotes.length ? (
                <MetadataContainer prefix="â†‘" ariaLabel="Parent notes">
                  <ul class="flex-row wrap f-gap-2xs">
                    {parentNotes.map((c, index) => (
                      <>
                        <li>
                          <AccentA href={c.route}>
                            {`${c.data.emojip} ${c.name}`}
                          </AccentA>
                        </li>
                        {index < parentNotes.length - 1 && (
                          <span aria-hidden>{" â€¢ "}</span>
                        )}
                      </>
                    ))}
                  </ul>
                </MetadataContainer>
              ) : (
                <MetadataContainer prefix="â†‘" ariaLabel="Parent notes">
                  <AccentA href="/garden">ðŸŒ² Garden Root</AccentA>
                </MetadataContainer>
              )}
            </>
          )
        }
        <div class="flex-row wrap">
          {
            metadata.published && (
              <>
                <div class="ws-nowrap">
                  <div class="sr-only">published on </div>
                  <MetadataValueItem value={metadata.published} />
                </div>
                {isWithinDuration(
                  metadata.published,
                  metaMinDays.newPublished
                ) && <Pill variant="new" />}
                <span aria-hidden>{" â€¢ "}</span>
              </>
            )
          }
          {
            metadata.modified && (
              <div class="flex-row ws-nowrap">
                <span class="modified">
                  last modified
                  <Duration date={metadata.modified} variant="long" /> ago
                </span>
                {isWithinDuration(
                  metadata.modified,
                  metaMinDays.freshModified
                ) && <Pill variant="fresh" />}
              </div>
            )
          }
        </div>
      </div>
      {metadata.fyi && <Alert variant="fyi" content={metadata.fyi} />}
      {metadata.status && <Alert variant={metadata.status} />}
    </NoteHeader>
  </slot>
  <Content />
  {metadata.resources && <FurtherResources resources={metadata.resources} />}
  {
    formattedRelations && (
      <>
        <div class="relations-cont | full region">
          <NoteRelationsSection formattedRelations={formattedRelations} />
        </div>
        <div class="footer-block | full" aria-hidden />
      </>
    )
  }

  <Fragment slot="sheetBody">
    <h3>{title}</h3>
    <Metadata metadata={metadata} />
    <slot name="sidebar" />
    <Toc headings={headings} />
  </Fragment>
</NoteLayout>

<style>
  h3 {
    font-family: var(--font-heading-sans);
  }

  .relations-cont {
    --flow-space: var(--space-3xl);
    background-color: var(--bg2);
    @media (width >= 800px) {
      grid-column: wide;
      border-radius: var(--radius-2);
      border-width: 1px;
    }
  }
  .footer-block {
    --flow-space: 0;
    z-index: -1;
    margin-top: calc(10rem * -1);
    height: 10rem;
    background-color: var(--bg2);
    @media (width < 800px) {
      display: none;
    }
  }

  .modified {
    font-style: italic;
  }
  hr + :global(*) {
    --flow-space: var(--space-s);
  }
</style>
