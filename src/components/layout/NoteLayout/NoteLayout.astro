---
import type { MarkdownHeading } from "astro";
import BaseMain from "~/components/layout/BaseMain.astro";
import NoteList from "~/components/layout/NoteList.astro";
import type { MetadataProps } from "./components/metadata/Metadata.astro";
import Metadata from "./components/metadata/Metadata.astro";
import Toc from "./components/toc/Toc.astro";
import TocScrollspy from "./components/toc/TocScrollspy.astro";

interface Props {
  title: string;
  headings?: MarkdownHeading[];
  metadata?: MetadataProps;
}

const { title, headings = [], metadata = {} } = Astro.props;

// collection
const { collectionItems, series } = metadata;
const isCollection = !!collectionItems?.length;
const collectionData = isCollection && {
  isOrdered: !!series,
  items: series ?? collectionItems,
};
---

<BaseMain title={title}>
  <slot slot="head" name="head" />
  <Fragment slot="sheetBody">
    <h3>{title}</h3>
    <Metadata metadata={metadata} />
    <slot name="sidebar" />
    <Toc headings={headings} />
  </Fragment>
  <article class="note-body">
    <aside class="flow-lg">
      <Metadata metadata={metadata} />
      <div class="aside-sticky flow">
        <slot name="sidebar" />
        <TocScrollspy headings={headings} />
      </div>
    </aside>
    <div class="article-main full cgrid prose flow-lg">
      <slot />
      {
        collectionData && (
          <Fragment>
            <hr />
            <NoteList class="popout" {...collectionData} />
          </Fragment>
        )
      }
    </div>
  </article>
</BaseMain>

<style>
  .note-body {
    display: grid;
    grid-template-columns: 1fr 26vw;
  }

  aside {
    padding-inline: var(--space-m);
    padding-bottom: var(--space-2xs);
    position: relative;
  }
  .aside-sticky {
    position: sticky;
    top: var(--space-xs);
    max-height: 98vh;
    height: min(min-content, 100vh);
    width: 100%;
    overflow-x: hidden;
  }
  @media (width < 900px) {
    .note-body {
      grid-template-columns: 1fr;
    }
    aside {
      display: none;
    }
  }
  .article-main {
    grid-row-start: 1;
    grid-column: 1;

    & :global(:is(h1)) {
      --flow-space: var(--space-2xs);
    }
    & :global(h1 + *) {
      --flow-space: var(--size-ch-7);
    }
  }
</style>
