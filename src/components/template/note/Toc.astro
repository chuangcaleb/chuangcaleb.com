---
import TocHeading from "./TocHeading.astro";

interface HeadingNode {
  depth: number;
  text: string;
  slug: string;
}
export interface NestedHeadingNode extends HeadingNode {
  subheadings: NestedHeadingNode[];
}

export type Props = {
  headings: HeadingNode[];
};

// https://kld.dev/building-table-of-contents/
function buildToc(headings: HeadingNode[]) {
  const toc = [] as NestedHeadingNode[];
  const parentHeadings = new Map();
  headings.forEach((h) => {
    const heading = { ...h, subheadings: [] };
    parentHeadings.set(heading.depth, heading);
    // Change 2 to 1 if your markdown includes your <h1>
    if (heading.depth === 2) {
      toc.push(heading);
    } else {
      parentHeadings.get(heading.depth - 1)?.subheadings.push(heading);
    }
  });
  return toc;
}

const { headings } = Astro.props;

const nestedHeadings = buildToc(headings);

// Boot out H1; but we've already stripped it in lib/remark/strip-h1.mjs
// keeping this here in case
// const tocHeadings = (function () {
//   if (headings[0].depth === 1) {
//     headings.shift();
//   }
//   return headings;
// })();
---

<aside>
  <nav>
    <ul>{nestedHeadings.map((h) => <TocHeading heading={h} />)}</ul>
  </nav>
</aside>

<style>
  aside {
    position: sticky;
    /* top: 0; */
    inset-block: var(--size-relative-4);
    min-width: 30ch;
    height: 98vh;
    padding-inline: var(--space-xs);
    margin-inline-end: var(--space-xs);
    overflow-y: scroll;
  }
</style>
