---
import { type HTMLTag, type Polymorphic } from "astro/types";

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> & {
  variant?: "brand" | "ghost";
  size?: 1;
};

export type ButtonProps<T extends HTMLTag> = Props<T>;

const {
  as: Comp = "button",
  variant,
  class: className,
  ...props
} = Astro.props;
---

<Comp class:list={["cc-btn", variant, className]} {...props}>
  <slot />
</Comp>

<style is:global>
  .cc-btn {
    background-color: var(--_bg, var(--bg2));
    color: var(--_text, var(--text-strong));
    border-color: var(--_border, var(--border));
    border-width: 2px;

    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: var(--size-relative-3);

    padding: var(--size-relative-2) var(--size-relative-3);
    border-style: solid;
    border-radius: var(--radius-2);

    font-size: var(--step-0);
    font-weight: var(--font-weight-7);
    text-decoration-line: none;
    text-transform: lowercase;

    [data-theme="dark"] & {
      --_bg-hover: var(--text-strong);
      --_border-hover: transparent;
    }
    [data-theme="light"] & {
      --_bg-hover: var(--text-on-brand);
      --_border-hover: var(--ax1);
    }

    &.brand {
      --_bg: var(--ax1);
      --_text: var(--text-on-brand);
      --_border: transparent;
      --_text-hover: var(--ax1);
    }

    /* &.ghost {
      --_bg: none;
      --_text: var(--text-normal);
      --_border: transparent;
      --_border-hover: transparent;
      --_text-hover: var(--text-strong);
      --_bg-hover: var(--bg1);
      text-decoration: underline;
      text-decoration-color: var(--tx3);
    } */

    &[size="1"] {
      font-size: var(--step-1);
    }

    &:is(:focus, :active) {
      transform: scale(0.95);
    }

    &:is(:hover, :focus, :active) {
      --_bg: var(--_bg-hover);
      --_text: var(--_text-hover, var(--ax1));
      --_border: var(--_border-hover);
      /* text-decoration-color: var(--ax2); */
    }

    svg {
      width: 1.5em;
    }
  }
</style>
