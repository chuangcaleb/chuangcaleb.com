---
import { type HTMLTag, type Polymorphic } from "astro/types";

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> & {
  theme?: "brand";
};

const { as: Comp = "button", theme, class: className, ...props } = Astro.props;
---

<Comp class:list={["cc-btn", theme, className]} {...props}>
  <slot />
</Comp>

<style is:global>
  .cc-btn {
    background-color: var(--_bg, var(--surface-1b));
    color: var(--_text, var(--text-1));
    border-color: var(--_border, var(--border));
    border-width: var(--_border-width, 1px);

    display: inline-flex;
    gap: var(--size-1);
    align-items: center;
    padding: var(--size-2) var(--size-3);
    font-weight: var(--font-weight-7);
    border-style: solid;
    border-radius: var(--radius-2);

    svg {
      height: 2rem;
      width: 2rem;
    }

    &.brand {
      --_bg: var(--brand);
      --_text: var(--text-on-brand);
      --_border: transparent;
      --_text-hover: var(--brand);
    }

    &:has(svg:first-child:last-child) {
      padding: var(--size-1);
    }
    &:has(svg:not(:first-child:last-child)) {
      padding: var(--size-1) var(--size-2);
    }
    &:is(a) {
      margin: 0;
    }

    &:hover {
      --_bg: var(--_bg-hover);
      --_text: var(--_text-hover, var(--brand));
      box-shadow:
        var(--tw-ring-offset-shadow, 0 0 var(--brand)),
        var(--tw-ring-shadow, 0 0 var(--brand)),
        /* 0 0 0 0.15em var(--brand), */ 0 0 var(--size-8) 0 var(--brand);
    }

    @media (prefers-color-scheme: dark) {
      &:hover {
        --_bg-hover: var(--text-1);
        --_border: transparent;
      }
    }
    @media (prefers-color-scheme: light) {
      &:hover {
        --_bg-hover: var(--surface-1a);
        --_border: var(--brand);
      }
    }
  }
</style>
