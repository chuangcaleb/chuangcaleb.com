---
import type { NoteMetadata } from "lib/utils/types";
import Pill from "~/components/block/note/Pill.astro";
import { formatDisplayDate, isWithinDuration } from "~/utils/time";
import Duration from "../Duration.astro";

interface Props {
  data: NoteMetadata;
}

const { data } = Astro.props;
const { published, modified, emojip, down, description } = data;
// const renderMetadata = (note: Note) =>
//   [
//     formatDisplayDate(note.data?.published),
//     note.data?.modified &&
//       `modified ${getLongDurationSince(note.data?.modified)}`,
//   ]
//     .filter(Boolean)
//     .join(" ⋅ ");
const shouldShowModified = modified && !emojip;
const publishedTime = published && formatDisplayDate(published);
---

{description && emojip && <span class="description">{description}</span>}
<span class="flex-row">
  {
    publishedTime && (
      <>
        <time
          class="published"
          aria-label=""
          datetime={published.toISOString().slice(0, 10)}
        >
          <span class="sr-only">published on </span>

          {publishedTime}
        </time>
        {isWithinDuration(published, 45) && (
          <Pill emoji="🐣" label="new" ariaLabel="newly published" />
        )}
      </>
    )
  }
</span>
<span class="flex-row">
  {
    shouldShowModified && (
      <>
        <span>
          modified <Duration date={modified} />
        </span>
        {isWithinDuration(modified, 14) && (
          <Pill emoji="🥬" label="fresh" ariaLabel="recently published" />
        )}
      </>
    )
  }
</span>
{emojip && <span class="children-count">{`${down?.length} NOTES`}</span>}

<style>
  .flex-row {
    --f-gap: var(--space-2xs);
  }
  * {
    color: var(--text-faded);
    font-size: var(--step--1);
    line-height: var(--font-lh-1);
  }
  .published {
    color: var(--text-normal);
  }
  .children-count {
    margin-block-start: var(--space-2xs);
  }
</style>
