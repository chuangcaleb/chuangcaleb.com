---
import type { NoteMetadata } from "lib/utils/types";
import Pill from "~/components/block/note/Pill.astro";
import { metaMinDays } from "~/utils/note-meta";
import { formatDisplayDate, isWithinDuration } from "~/utils/time";
import Duration from "../Duration.astro";
import { getWordCountPill } from "~/utils/pill-variants";

interface Props {
  data: NoteMetadata;
}

const { data } = Astro.props;
const { published, modified, emojip, down, description, status, fyi, words } =
  data;
// const renderMetadata = (note: Note) =>
//   [
//     formatDisplayDate(note.data?.published),
//     note.data?.modified &&
//       `modified ${getLongDurationSince(note.data?.modified)}`,
//   ]
//     .filter(Boolean)
//     .join(" ⋅ ");
const shouldShowModified = modified && !emojip;
const publishedTime = published && formatDisplayDate(published);
---

{description && <span class="description">{description}</span>}
<div class="spacer" aria-hidden></div>
{
  publishedTime && (
    <span class="published">
      <time aria-label="" datetime={published.toISOString().slice(0, 10)}>
        <span class="sr-only">published on </span>
        {publishedTime}
      </time>
      {published && isWithinDuration(published, metaMinDays.newPublished) && (
        <Pill variant="new" />
      )}
    </span>
  )
}

<span class="flex-row wrap f-gap-2xs">
  {emojip && `${down?.length} NOTES`}
  {words && !emojip && <Pill {...getWordCountPill(words)} />}
  {status && <Pill variant={status} />}
  {fyi && <Pill variant="fyi" />}
  {
    shouldShowModified &&
      (isWithinDuration(modified, metaMinDays.freshModified) ? (
        <Pill variant="fresh" />
      ) : (
        <i>
          • modified <Duration date={modified} /> ago
        </i>
      ))
  }
</span>

<style>
  * {
    color: var(--text-faded);
    font-size: var(--step--1);
    line-height: var(--font-lh-1);
  }
  .spacer {
    height: var(--space-2xs);
  }
  .published {
    position: absolute;
    top: calc(var(--size-ch-4) * -1);
    left: calc(var(--space-s) + 0.1em);
    font-weight: var(--fw-6);
    background-color: var(--bg1);
    border-radius: var(--radius-2);
    padding-inline: var(--size-ch-2);
    & > :global(*) + :global(*) {
      margin-left: var(--size-ch-2);
    }
  }
</style>
