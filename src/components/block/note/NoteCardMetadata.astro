---
import type { NoteMetadata } from "lib/utils/types";
import Pill from "~/components/block/note/Pill.astro";
import { metaMinDays } from "~/utils/note-meta";
import { formatDisplayDate, isWithinDuration } from "~/utils/time";
import Duration from "../Duration.astro";

interface Props {
  data: NoteMetadata;
}

const { data } = Astro.props;
const { published, modified, emojip, down, description, status, fyi } = data;
// const renderMetadata = (note: Note) =>
//   [
//     formatDisplayDate(note.data?.published),
//     note.data?.modified &&
//       `modified ${getLongDurationSince(note.data?.modified)}`,
//   ]
//     .filter(Boolean)
//     .join(" â‹… ");
const shouldShowModified = modified && !emojip;
const publishedTime = published && formatDisplayDate(published);
---

{description && emojip && <span class="description">{description}</span>}
{
  publishedTime && (
    <span class="flex-row">
      <time
        class="published"
        aria-label=""
        datetime={published.toISOString().slice(0, 10)}
      >
        <span class="sr-only">published on </span>
        {publishedTime}
      </time>
      {isWithinDuration(published, metaMinDays.newPublished) && (
        <Pill variant="new" />
      )}
    </span>
  )
}

<span class:list={["flex-row f-gap-2xs", emojip && "is-topic"]}>
  {emojip && `${down?.length} NOTES`}
  {
    shouldShowModified && (
      <span>
        modified <Duration date={modified} />
      </span>
    )
  }
  {status === "wip" && <Pill variant="wip" />}
  {status === "stub" && <Pill variant="stub" />}
  {fyi && <Pill variant="fyi" />}
  {
    shouldShowModified &&
      isWithinDuration(modified, metaMinDays.freshModified) && (
        <Pill variant="fresh" />
      )
  }
</span>

<style>
  * {
    color: var(--text-faded);
    font-size: var(--step--1);
    line-height: var(--font-lh-1);
  }
  .published {
    color: var(--text-normal);
  }
  .is-topic {
    margin-block-start: var(--space-2xs);
  }
</style>
