---
import type { NoteReference } from "lib/utils/types";
import NoteCardContent from "~/components/block/note/NoteCardContent.astro";
import NoteLink from "~/components/block/NoteLink.astro";
import Card from "~/components/styled/monom/note/Card.astro";
import NoteLi from "~/components/styled/monom/note/NoteLi.astro";
import { getNoteEntries } from "~/utils/note";

interface Props {
  references: NoteReference[];
  variant?: "simple" | "inline" | "card";
  isOrdered?: boolean;
}

const { references, variant = "card", isOrdered = false } = Astro.props;

const notes = await getNoteEntries(references);
---

{
  notes.map((note, index) => {
    if (!note) return null;
    const isRouteMatch = note.route === Astro.url.pathname;

    return (
      <li>
        {variant === "card" && (
          <>
            <Card
              {...(isRouteMatch
                ? { as: "div", "aria-label": note.name, variant: "active" }
                : { as: "a", href: note.route, "aria-label": note.name })}
            >
              {isOrdered && (
                <span class="counter text-faded surface-alt">{index + 1}</span>
              )}
              <NoteCardContent note={note} />
            </Card>
          </>
        )}
        {variant === "inline" && (
          <NoteLi as="a" href={note.route}>
            <NoteCardContent note={note} />
          </NoteLi>
        )}
        {variant === "simple" &&
          (isRouteMatch ? (
            <li>
              <b>{note.name}</b>
            </li>
          ) : (
            <NoteLink note={note} />
          ))}
      </li>
    );
  })
}

<style>
  .counter {
    position: absolute;
    top: calc(var(--space-s) * -1);
    left: calc(var(--space-s) * -1 - 0.4ch);
    padding-inline: var(--space-s);
    border-radius: 50%;
    min-width: 3ch;

    font-size: var(--step-2);
    font-weight: var(--fw-6);
    font-family: var(--font-heading-sans);
  }
</style>
