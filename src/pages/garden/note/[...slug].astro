---
import { getCollection } from "astro:content";
import { slugify } from "lib/markdown/slugify";
import path from "path";
import WIPDisclaimer from "~/components/block/WIPDisclaimer.astro";
import Base from "~/components/layout/Base.astro";
import Main from "~/components/layout/Main.astro";
import BrandA from "~/components/styled/monom/BrandA.astro";
import Metadata from "~/components/template/note/Metadata.astro";
import Toc from "~/components/template/note/Toc.astro";

export async function getStaticPaths() {
  const notes = await getCollection("obsidian-note");
  return notes.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { data } = entry;
const { Content, headings } = await entry.render();
// const { lastModified, title, minutesRead, wordCount } = remarkPluginFrontmatter;

// const properties: MetadataProps = [
//   { title: "size", content: `${minutesRead} / ${wordCount} words` },
//   { title: "modified", content: lastModified },
//   {
//     title: "published",
//     content: data.published ?? data.created ?? data.date_created ?? data.date,
//     type: "date",
//   },
// ];
const title = data.title ?? path.parse(entry.id).name;
const isCollection =
  data.tags &&
  (data.tags?.includes("ðŸ“‚/collection/series") ||
    data.tags?.includes("ðŸ“‚/collection"));
---

<Base title={title}>
  <Main>
    <WIPDisclaimer />
    <div class="article">
      <div class="cont-header | cgrid-max">
        <header class="region">
          <h1>{title}</h1>
          <Metadata metadata={data} />
        </header>
      </div>
      <div class="body region">
        <aside class="cgrid no-scrollbar">
          <Toc headings={headings} />
        </aside>
        <article class="prose cgrid flow-lg">
          <Content />
          {
            isCollection && data?.collectionItems && (
              <ul>
                {data.collectionItems.map((item) => (
                  <li>
                    <BrandA
                      href={slugify(path.basename(item, path.extname(item)))}
                    >
                      {path.parse(item).name}
                    </BrandA>
                  </li>
                ))}
              </ul>
            )
          }
        </article>
      </div>
    </div>
  </Main>
</Base>
<style>
  .cont-header {
    background-color: var(--surface-1b);
  }
  header {
    display: flex;
    gap: var(--space-xs);
    justify-content: space-between;
    flex-wrap: wrap;
  }
  h1 {
    text-wrap: balance;
    word-wrap: normal;
  }
  /* Remove h1 */
  article :global(h1:first-of-type) {
    display: none;
  }
  /* Remove first element's flow space */
  article :global(> h1:nth-child(1) + *:nth-child(2)) {
    --flow-space: 0;
  }

  .body {
    display: flex;
    flex-direction: row-reverse;
    /* gap: var(--space-xs); */
    position: relative;
    /* align-items: flex-start; */
    @media (width < 900px) {
      flex-direction: column;
    }
  }
  aside {
    /* display: block; */
    position: sticky;
    top: 0;
    max-width: var(--size-header-3);
    height: 100vh;
    /* padding-inline: var(--space-xs); */
    padding-block: var(--space-2xs);
    /* This aligns top edge */
    margin-block-start: calc(-1 * var(--space-2xs));
    /* margin-inline-end: var(--space-2xs); */
    overflow-y: scroll;
    > * {
      max-width: 30ch;
    }

    @media (width < 900px) {
      /* display: grid;
      position: relative;
      height: 100%; */
      display: none;
    }
  }
</style>
