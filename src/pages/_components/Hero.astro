---
import { Icon } from "astro-iconify";
import { Image } from "astro:assets";
import heroImg from "~/assets/hero.jpeg";
import Button from "~/components/primitive/Button.astro";
import BrandA from "~/components/styled/monom/BrandA.astro";
import LINKS from "~/data/links";

const props = Astro.props;
---

<section class="region container" {...props}>
    <div class="cont-img border">
      <Image
        src={heroImg}
        alt="Head profile of Chuang Caleb"
        widths={[240, 540, 720, heroImg.width]}
        sizes={`(max-width: 360px) 240px, (max-width: 720px) 540px, (max-width: 900px) 720px, ${heroImg.width}px`}
        fetchpriority="high"
        loading="eager"
      />
    </div>
    <div class="cont-text | flow-lg">
      <p class="suptitle">chuang caleb</p>
      <h1 class="flom-2xs">
        software dev <br />
        with a different <mark>story.</mark>
      </h1>
      <p>
        Ahoy! ðŸŒŠ This is Caleb speaking. I professionally tinker with <b>
          UI design systems
        </b> & <b>dynamic web apps</b> â€” and unprofessionally with <b>
          narrative storytelling</b
        >.
      </p>
      <p>You'll find out about me on this site. Wanna work together?</p>
      <div class="cont-cta flom-xl">
        <Button as="a" theme="brand" href={LINKS['EMAIL'].href}>
          <Icon name={LINKS['EMAIL'].icon} />{}email me
        </Button>
        <Button as="a" href="#projects">
          <Icon name="lucide:atom"  />{}see projects
        </Button>
      </div>
    </div>
    <div class="cont-socials region">
      <ul class="socials-ul flow-md">
        {
          Object.values(LINKS).map((link) => (
            <li>
              <BrandA href={link.href}>
                <span>{link?.userId ?? link.label}</span>{}<Icon name={link.icon} />
              </BrandA>
            </li>
          ))
        }
      </ul>
    </div>
</section>


<style lang="scss">
  section {
    display: grid;
    grid-template-columns: 1fr minmax(9rem, 0.7fr);
    column-gap: var(--space-m);
    position: relative;
  }

  .cont-text {
    display: grid;
    grid-column: 1 / -1;
    grid-row: 3 / 8;
    grid-template-columns: subgrid;
    grid-template-rows: auto;
    align-content: start;

    .suptitle {
      font-size: var(--step-3);
      font-weight: var(--font-weight-4);
      font-family: var(--font-heading);
      letter-spacing: var(--font-letterspacing-1);
      color: var(--text-faded);
      text-decoration: underline;
      text-decoration-color: var(--ax1);
      // text-underline-offset: 0.25em;
      text-underline-offset: 0.5em;
    }

     > * {
      grid-column: 1 / -2;
      @media (width < 600px) {
        grid-column: 1 / -1;
      }
    }
    h1 {
      grid-column: 1 / -1;
      text-wrap: balance;
      line-height: var(--step-7);
      font-size: var(--step-7);
      letter-spacing: var(--font-letterspacing-1);
      max-width: none;
    }
    p {
      text-wrap: balance;
      font-size: var(--step-1);
    }

    .cc-btn {
      font-size: var(--step-1);
    }
  }

  .cont-img {
    grid-column: -2 / -1;
    grid-row: 1 / 6;
    justify-self: end;
    filter: brightness(1.2) saturate(0.8);
    z-index: -1;
    position: relative;
    width: 100%;
    max-width: 400px;
    height: fit-content;

    img {
      position: inherit;
      z-index: -2;
    }
    &::after {
      background-color: hsla(var(--base-h) var(--base-s) var(--base-l) / 0.35);
      content: "";
      position: absolute;
      height: 100%;
      width: 100%;
      inset: 0;
    }
    @media (width < 700px) {
      &::after {
        box-shadow: inset 0 calc(var(--space-l) * -1) var(--space-3xl) calc(var(--space-l) * -1) var(--surface-1a);
      }
    }
  }

  .cont-socials {
    grid-column: -2 / -1;
    grid-row: 6 / 8;
    text-align: end;
    display: grid;
    align-items: end;

    @media (width < 600px) {
      grid-column: 1 / -1;
      grid-row: auto;
    }
    ul {
      // font-size: var(--step-1);
      text-transform: lowercase;
      a {
        gap: var(--size-relative-3);
        &:is(:not(:hover, :focus, :active)) span {
          color: var(--ax2);
        }
      }
      svg {
        width: var(--step-4);
      }
      @media (width < 600px) {
        display: flex;
        // flex-direction: column;
        flex-wrap: wrap;
        justify-content: center;
        column-gap: var(--space-m);
        row-gap: var(--space-2xs);
        * {
          --flow-space: 0;
        }
        a {
          flex-direction: row-reverse;
        }
      }
    }
  }

  .cont-cta {
    display: flex;
    flex-wrap: wrap;
    column-gap: var(--space-m);
    row-gap: var(--space-xs);
  }

  mark {
    -webkit-animation: 1.5s highlight 0.2s 1 normal forwards;
    animation: 1.5s highlight 0.2s 1 normal forwards;
    background-color: none;
    background: linear-gradient(45deg, var(--ax1) 50%, transparent 50%);
    background-size: 205% 100%;
    background-position: 100% 0;
    color: var(--text-on-brand);
    padding-inline: var(--space-3xs);
  }
  @-webkit-keyframes highlight {
    to {
      background-position: 0 0;
    }
  }

  @keyframes highlight {
    to {
      background-position: 0 0;
    }
  }

  @media (width < 500px) {
    br {
      display: none;
    }
  }
</style>
