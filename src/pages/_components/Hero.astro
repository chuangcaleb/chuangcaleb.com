---
import { Icon } from "astro-iconify";
import SocialLink from "~/components/block/SocialLink.astro";
import Button from "~/components/styled/polym/Button.astro";
import { SOCIALS } from "~/data/links";
import { Content as HeroBodyContent } from "./_hero-body.mdx";
import profileImg from "src/assets/img/profile.jpg";
import { Picture } from "astro:assets";

const props = Astro.props;
---

<section class="region" {...props}>
  <div class="cont-img">
    <Picture
      src={profileImg}
      alt="Facial profile picture of Chuang Caleb"
      sizes={`(max-width: 1050px) 35.4vw, 800px`}
      widths={[140, 280, 400, 480, 560, 650, 720, 800]}
      class="border"
      formats={["avif", "webp"]}
      loading="eager"
    />
  </div>
  <div class="cont-text | flow">
    <h1 class="before-title">Chuang Caleb</h1>
    <p class="title flom-xs">
      software dev <br />
      with a different <mark>story.</mark>
    </p>
    <HeroBodyContent />
    <div class="cont-cta flom-xl">
      <Button as="a" variant="brand" href={SOCIALS["EMAIL"].href} step={1}>
        <Icon name={SOCIALS["EMAIL"].icon} />{}email me
      </Button>
      <Button as="a" href="#projects" step={1}>
        <Icon name="lucide:atom" />{}see projects
      </Button>
    </div>
  </div>
  <div class="cont-socials">
    <ul class="flow-md">
      {
        Object.keys(SOCIALS).map((l) => (
          <li>
            <SocialLink link={l} display="userId" />
          </li>
        ))
      }
    </ul>
  </div>
</section>

<style lang="scss">
  section {
    display: grid;
    grid-template-columns: 1fr 0.7fr;
    column-gap: var(--space-m);
    position: relative;
  }

  .cont-text {
    display: grid;
    grid-column: 1 / -1;
    grid-row: 2 / 5;
    grid-template-columns: subgrid;
    grid-template-rows: auto;
    align-content: start;

    .before-title {
      font-size: var(--step-3);
      font-weight: var(--font-weight-5);
      font-family: var(--font-heading-serif);
      letter-spacing: var(--font-letterspacing-1);
      color: var(--text-faded);
      text-decoration: underline;
      text-decoration-color: var(--ax1);
      text-underline-offset: 0.5em;
      text-transform: lowercase;
    }

    > :global(*) {
      grid-column: 1 / -2;
      @media (width < 675px) {
        grid-column: 1 / -1;
      }
    }
    .title {
      grid-column: 1 / -1;
      text-wrap: balance;
      color: var(--text-strong);
      line-height: var(--font-lineheight-00);
      font-weight: var(--font-weight-8);
      font-size: var(--step-6);
      font-family: var(--font-heading-serif);
    }
    :global(p) {
      text-wrap: balance;
      font-size: var(--step-1);
    }
  }

  .cont-img {
    grid-column: -2 / -1;
    grid-row: 1 / 4;
    justify-self: end;
    filter: brightness(1.2) saturate(0.8);
    z-index: -1;
    position: relative;
    width: 100%;
    max-width: 400px;
    height: fit-content;

    img {
      position: inherit;
      z-index: -2;
    }
    &::after {
      background-color: hsla(var(--base-h) var(--base-s) var(--base-l) / 0.35);
      content: "";
      position: absolute;
      height: 100%;
      width: 100%;
      inset: 0;
    }
    @media (width < 700px) {
      &::after {
        box-shadow: inset 0 calc(var(--space-l) * -1) var(--space-3xl)
          calc(var(--space-l) * -1) var(--bg1);
      }
    }
  }

  .cont-socials {
    grid-column: -2 / -1;
    grid-row: 4 / 5;
    text-align: end;
    display: grid;
    align-items: end;
    margin-block-start: var(--space-l);

    @media (width >= 675px) {
      :global(a) {
        flex-direction: row-reverse;
      }
    }
    @media (width < 675px) {
      grid-column: 1 / -1;
      grid-row: auto;
    }
    ul {
      text-transform: lowercase;
      :global(svg) {
        width: var(--step-3);
      }
      @media (width < 675px) {
        display: flex;
        flex-wrap: wrap;
        column-gap: var(--space-m);
        row-gap: var(--space-2xs);
        li {
          --flow-space: 0;
        }
      }
    }
  }

  .cont-cta {
    display: flex;
    flex-wrap: wrap;
    column-gap: var(--space-m);
    row-gap: var(--space-xs);
  }

  mark {
    animation: 3s highlight 0.5s 1 ease-out forwards;
    background: linear-gradient(90deg, var(--ax1) 50%, var(--bg3) 50%);
    background-size: 205% 100%;
    background-position: 100% 0;
    color: var(--text-on-ax);
    padding: var(--size-relative-1);
    padding-top: 0;
    border-radius: var(--size-relative-2);
    display: inline-block;
  }
  @keyframes highlight {
    to {
      background-position: 0 0;
    }
  }

  @media (width < 500px) {
    br {
      display: none;
    }
  }
</style>
