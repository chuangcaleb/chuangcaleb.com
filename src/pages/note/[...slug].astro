---
import { getCollection } from "astro:content";
import WIPDisclaimer from "~/components/block/WIPDisclaimer.astro";
import Base from "~/components/layout/Base.astro";
import Main from "~/components/layout/Main.astro";
import CollectionList from "./_components/CollectionList.astro";
import Metadata from "./_components/metadata/Metadata.astro";
import Toc from "./_components/toc/Toc.astro";
import { getNoteName } from "~/utils/post";

export async function getStaticPaths() {
  const notes = await getCollection("obsidian-note");
  return notes.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { data } = entry;
const { Content, headings } = await entry.render();

const noteName = getNoteName(entry.id);
const title = data.title ?? noteName;
---

<Base title={title}>
  <Main>
    <WIPDisclaimer />
    <div class="cont-header | cgrid-max">
      <header class="region">
        <h1>{title}</h1>
        <Metadata metadata={data} />
      </header>
    </div>
    <article class="cgrid region prose flow-lg">
      <aside class="toc-aside no-scrollbar">
        <Toc headings={headings} />
      </aside>
      <Content />
      <CollectionList note={entry} />
    </article>
  </Main>
</Base>

<style>
  .cont-header {
    background-color: var(--surface-1b);
  }
  header {
    display: flex;
    gap: var(--space-xs);
    justify-content: space-between;
    flex-wrap: wrap;
  }
  h1 {
    text-wrap: balance;
    word-wrap: normal;
  }

  /* Remove h1 */
  .prose :global(.toc-aside + h1) {
    display: none;
  }
  /* Remove first element's flow space */
  .prose > :global(.toc-aside + h1 + *) {
    --flow-space: 0;
  }

  aside {
    grid-column-start: feature-end;
    grid-column-end: full-end;
    /* height: 0px; */
    grid-row: 1 / 999;
    position: sticky;
    top: var(--space-2xs);
    height: min(100%, 100vh);
    padding-inline: var(--space-xs);
    /* padding-block: var(--space-2xs); */
    padding-bottom: var(--space-2xs);
    /* This aligns top edge */
    margin-block-start: calc(-1 * var(--space-2xs));
    /* margin-inline-end: var(--space-2xs); */
    overflow-y: scroll;
    > * {
      max-width: 30ch;
    }

    @media (width < 800px) {
      display: none;
    }
  }

  .cgrid {
    @media (width < 1000px) {
      --feature-g: 0;
      --popout-g: 0;
    }
    @media (width < 800px) {
      --wide-g-left: var(--wide-g);
    }
  }
</style>
