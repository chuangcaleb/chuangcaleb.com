---
import type { SuperNote } from "lib/utils/types";
import NoteListItems from "~/components/block/note/NoteListItems.astro";
import BaseMain from "~/components/layout/BaseMain.astro";
import TagWIcon from "~/components/styled/polym/TagWIcon.astro";
import { NAV_LINKS } from "~/data/links";
import { getAllNotes, getNoteEntry } from "~/utils/note";
import Featured from "./_components/Featured.astro";
import { Content as GardenIntroContent } from "./_components/garden-intro.mdx";
import Topics from "./_components/Topics.astro";
import NoteLink from "~/components/block/NoteLink.astro";
import { pillVariants } from "~/utils/pill-variants";

const publicNotes = await getAllNotes();

// const leafNotes = publicNotes
//   .filter((n) => !n.data.emojip)
//   .sort((a, b) => (a.body && b.body && a.body.length < b.body.length ? 1 : -1));

const recentlyPublished = publicNotes
  .filter(
    (n): n is SuperNote & { data: { published: Date } } => !!n.data.published
  )
  .sort((a, b) => b.data?.published?.getTime() - a.data.published.getTime())
  .slice(0, 5);

const recentlyModified = publicNotes
  .filter(
    (n): n is SuperNote & { data: { modified: Date } } =>
      !!n.data.modified && !n.data.emojip
  )
  .sort((a, b) => b.data?.modified?.getTime() - a.data.modified.getTime())
  .slice(0, 5); // TODO: exclude from recentlyPublished list

const topLevelTopics = publicNotes
  .filter((n) => n.data.emojip && n.data.up?.length === 0)
  .sort((a, b) => (b.data.featured ?? 0) - (a.data.featured ?? 0));

const icon = NAV_LINKS.GARDEN.icon;

const description =
  "Like a blog, but more 🐬 fluid. I like to yap about 🎭 narrative storytelling and sometimes 💻 tech stuff, and perhaps you like to listen to yapping...";

// featured
// Pinned
// Latest Now

// Recently Published
// Recently Edited
// All now's

const startHereNotes = [
  {
    id: "digital-garden-design-principles",
    collection: "obsidian-note",
  } as const,
  {
    id: "public-digital-garden/terms-of-service",
    collection: "obsidian-note",
  } as const,
];
---

<BaseMain title="Digital Garden" description={description} class="linew-wide">
  <article class="flow-xl">
    <header class="flow-xl prose">
      <TagWIcon iconName={icon} as="h1" style={{ gridArea: "t" }}>
        Caleb's Digital Garden
      </TagWIcon>
      <div class="flow garden-intro flom-lg" style={{ gridArea: "i" }}>
        <GardenIntroContent />
      </div>
      <div class="flow-lg flom-lg start-here-section" style={{ gridArea: "s" }}>
        <h2 class="start-here-title">📍 Start Here</h2>
        <ul class="flow">
          <NoteListItems references={startHereNotes} />
        </ul>
      </div>
    </header>
    <section class="flow-lg region">
      <h2>✨ Featured</h2>
      <Featured />
    </section>
    <section class="flow-lg region">
      <h2>📂 Top-Level Topic Notes</h2>
      <Topics topics={topLevelTopics} />
    </section>
    <div class="recents region">
      <section class="prose flow-lg">
        <h2>{pillVariants.new.emoji} Recently Published</h2>
        <ol class="flow">
          <NoteListItems references={recentlyPublished} />
        </ol>
      </section>
      <section class="prose flow-lg">
        <h2>{pillVariants.fresh.emoji} Recently Modified</h2>
        <ol class="flow">
          <NoteListItems references={recentlyModified} />
        </ol>
      </section>
    </div>
  </article>
</BaseMain>

<style>
  .start-here-title {
    font-size: var(--step-2);
  }
  header {
    display: grid;
    grid-template: "t" "i" "s";
    padding-block: var(--space-l);
    row-gap: var(--space-xs);
  }
  @media (width > 900px) {
    header {
      grid-template:
        "t t t s s"
        "i i i s s" / 1fr 1fr 1fr 1fr 1fr;
      column-gap: var(--space-xl);
    }
    .start-here-section {
      /* margin: 0; */
    }
  }

  .recents {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(min(100%, 30ch), 1fr));
    row-gap: var(--space-xl);
    column-gap: var(--space-m);
  }
</style>
